Create Files 
  > fileName – Create an empty file.
  touch fileName – Create an empty file.
  cat > filename – To create a new text file under Ubuntu, 
    use the cat command followed by the redirection symbol ( > ) 

Delete files 
  rm file - remove file 
  rm -r dir - remove the directory and its contents recursively 
  rm -f file - force removal and never prompt for confirmation 

Copying files 
  cp source_file destination_file 
    Copy source_file to destination file
  cp src_file1 [source file n] dest_dir 
    Copy source_files to destination_directory 
  cp -i  
    Run in interactive mode 
  cp -r source_directotry new_directory  
    Copy src_directory recursively to destination


Moving and Renaming files 
mv - move or rename files and directories
mv FILE destination
mv -i source destination 

mkdir [-p] directory - create a directory 
rmdir directory - remove empty directory 
rm -rf directory - recursively removes directory - for directories with subdirectories 


chgrp - change group 
	Chgrp [name of group] filename
umask- sets the file creation mask to mode, if given 
	Use -S to for symbolic notation 

Find and Locate - find files/directories 
find - Locate [locate is faster but it is not updated real time]
		If you just made a new file you will not be able to see it rn use find instead
	-name pattern - find files and directories that match pattern	
	find /usr/bin -name *l - find anything in this directory that ends with l
	-iname pattern - like -name but ignores case 
	-ls - performs and ls on each on the found items 
	-mtime days - finds files that are days old 
		find /usr/sbin -mtime +10 -mtime -90 -ls
			Directory ur in - older than 10 days and as old as 90^
	-size num - finds files that are newer than file
find /usr -size +1M -  find files that are bigger than a megabyte  
	-exec command {} \; - run command again all files that are found 
  
  
Sorting data
sort file - sort text in file. 
    -KF - sort by key. F is the field number(and: two) - 2==two
    -r - sort in reverse order 
    -u sort unique (removes duplicate lines)


Wildcards 
* - matches zero or more characters
? - matches exactly one character 
[] - a character class
Matches any of the characters in the bracket
    Ca[nt]
    Can
    Cat 
    Candy 
    Catch 
[!] - matches any of the characters not included between the brackets - 
Exclude what ever is in the bracket 
  Ranges -
  [a-g]*
    Match all files that start with a-g
  [3-6]*
    Match all files that start from 3-6

Named Characters
    [[:alpha:]]
    [[:alnum:]]
    [[:digit:]]
    [[:lower:]]
    [[:space:]]
    [[:upper:]]
    \ - escape character 
Match all files that end with a question mark
    *\?
       Done?
       
       
   Input/Output 
> redirects standard output to a file, overwrites - truncating- existing contents 
>> Redirects standard output to a file. Appends to any existing content 
< redirects input from a file to a command 
& - Used with redirection to signal that a file descriptor is being used 
2>&1 - combine stderr and standard output
2>file - redirect standard error to a file 
>/dev/null - redirect output to nowhere


 You can use diff to determine any differences between them 
    Diff file1 file2
 
 Side by Side comparison 
    sdiff file1 file2
    You can also use vimdiff file1 file2 - highlight diff in vim
      Ctrl-w w - go to next window
      :q - quit
      :qa - quit all
      :qa! - force quit
      
 grep - display lines matching a pattern 
grep pattern file
-i - perform a search, ignoring case
-c - count the number of occurrences in a file
-n - precede output with line numbers
-v - invert match. Print lines that don’t match   

file file_name - display the file type
Strings - display printable strings
Pipe symbol == | 
command -output | command-input
Ex. grep pattern file
Cat file | grep pattern
cut [file] - cut out selected portions of file. If file is omitted, use standard input
-d delimiter - use delimiter as the field separator
-f N - display the Nth field

Tr - replace character - not permanent change - only for the output 
tr ‘old char’ ‘new char.’
Column -t  == table format 


Listing processes 
ps - display process status
	-e - everything, a’’ processes 
	-f - full format listing 
	- u username - display usernames’ princesses 
	-p pid - display info for PID
	-ef - display all processes full
	-eH - display a process tree
Ps -e --forest - display a process tree 
Ps -u username - display users’ processes 
Pstree - display processes in a tree format
top - interactive processes viewer 
htop - interactive process viewer 


Background and Foreground Processes 
	Command & - start command in background 
	Ctrl-c - kill the foreground process
	Ctrl+z - suspend the foreground process
	bg [%num] - background a suspended process
	fg [%num] - foreground a background process 
	Kill - kill a process by job number or PID
	jobs [%num] - list jobs

Killing Processes
	Ctrl+c - kill the foreground proc.
	Kill [-sig] pid - send a signal to a process 
	Kill -l - Display list of signals 
	Kill 123
	KILL -15 123
	Kill -TERM[or use -9] 123 - term = terminate





Creating archives 
tar [-] c|x|t f tarfile [pattern] - create, extract or list contents of tar archive using pattern if supplied 
  C - create a tar archive 
  X extracts files from the archive 
  T - display the table of contents list
  V - be verbose 
  Z - use compression 
  F file - use this file 
Ex- tar cf tps.tar directory-name
  C - create tar | file - use the tps.tar file 
  tar xvf /path/file.at - list the files it is extracting 
gzip - compress file
Gunzip- uncompress files 
gzcat - concatenates compressed files
Zcat - concatenates compressed files


Edit Files with vi
  vi [file] - edit file 
  vim [file} -same as vi but more features 
  view [file] - starts vim in read only mode 
  Command and Navigation keys 
    k - up one line 
    j - down one line 
    h - left one character
    l - right one character  
    w - right one word - goes to the first letter of the next word
    b - left one word - goes to the first letter of the word behind 
    ^ - go to the beginning of the line 
    $ Go to the end of the line 
    Vi Insert Mode 
      i - inset at the cursor position \
      I - insert at the beginning of the line 
      a - append after the cursor position
      A - append at the end of the line 
    Vi Line Mode 
      :w writes - saves the file 
      : w! - forces the file to be saved 
      :q - quit 
      :q! - quit without saving changes 
      :wq! - write and quit 
      :x - same as :qw - save an quit 
      :n - positions the cursor at line n 
      :$ - positions the cursor on the last line 
      :set nu - turn on line numberiing 
      :set nonu - turn off line numbering 
      :help 
    Vi Modes 
      Mode		key
      Command 	Esc
      Insert		iIaA
      Line		:
    Vi repeating commands 
      5k -  move up a line 5 times 
      80i <text><esc> = Insert text 80 times - add shift+enter before pressing esc button for a new line each time 
      80i_<ESC>- insert 80 “_” characters 
    Vi - Deleting text
      x -delete a character 
      dw - delete a word 
      dd - delete a line 
      D - delete from the current position 
    Vi - changing Changing Text 	
      r - replace the current character 
      cw - change the current word 
      cc - change the current line 
      c$ - change the text from the current position 
      C - same as c$
      ~ - reverses the case of a character 
    Vi - copying and pasting 
      yy - yank/copy the current line 
      y<postion> - yank the <position>
      p - paste the most recent deleted or yanked text 
      Vi - Undo/Redo
      u - undo 
      ctrl+R - redo 
     Vi searching
      /<pattern> start a forward search
      For the commands below low use n to go to the next one or N to go back to the previous 
      ?<pattern> start a reverse search 
      For the commands below low use N  to go to the next one or n to go back to the previous 



